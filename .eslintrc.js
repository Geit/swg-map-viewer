module.exports = {
  extends: [
    'eslint:recommended',
    'prettier',
    'plugin:eslint-comments/recommended',
    'plugin:promise/recommended',
    'plugin:import/errors',
    'plugin:import/typescript',
    'plugin:react/recommended',
  ],
  plugins: ['prettier', 'promise', 'react', 'react-hooks'],
  parser: 'babel-eslint',
  parserOptions: {
    ecmaVersion: 2017,
    sourceType: 'module',
  },
  env: {
    es6: true,
    node: true,
    browser: true,
  },
  rules: {
    'react-hooks/rules-of-hooks': 'error',
    'react-hooks/exhaustive-deps': 'warn',
    'react/prop-types': ['error', { skipUndeclared: true }],
    'react/no-unused-prop-types': 'error',
    'react/jsx-no-useless-fragment': 'error',
    'eslint-comments/no-unused-disable': 'error',
    'array-callback-return': 'error',
    camelcase: 'error',
    'class-methods-use-this': 'error',
    'default-case': 'error',
    'dot-notation': 'error',
    eqeqeq: ['error', 'always', { null: 'ignore' }],
    'global-require': 'error',
    'handle-callback-err': 'error',
    'no-array-constructor': 'error',
    'no-buffer-constructor': 'error',
    'no-console': 'error',
    'no-duplicate-imports': 'error',
    'no-else-return': 'error',
    'no-empty-function': 'error',
    'no-eval': 'error',
    'no-extra-bind': 'error',
    'no-floating-decimal': 'error',
    'no-implicit-coercion': 'error',
    'no-implied-eval': 'error',
    'no-labels': 'error',
    'no-lone-blocks': 'error',
    'no-lonely-if': 'error',
    'no-multi-assign': 'error',
    'no-multi-str': 'error',
    'no-nested-ternary': 'error',
    'no-new-func': 'error',
    'no-new-object': 'error',
    'no-new-require': 'error',
    'no-new-wrappers': 'error',
    'no-new': 'error',
    'no-param-reassign': ['error', { props: true }],
    'no-path-concat': 'error',
    'no-plusplus': ['error', { allowForLoopAfterthoughts: true }],
    'no-proto': 'error',
    'no-return-assign': 'error',
    'no-return-await': 'error',
    'no-self-compare': 'error',
    'no-sequences': 'error',
    'no-shadow-restricted-names': 'error',
    'no-shadow': 'error',
    'no-undef': ['error', { typeof: true }],
    'no-undef-init': 'error',
    'no-unmodified-loop-condition': 'error',
    'no-unneeded-ternary': 'error',
    'no-unused-expressions': 'error',
    'no-useless-call': 'error',
    'no-useless-catch': 'error',
    'no-useless-computed-key': 'error',
    'no-useless-concat': 'error',
    'no-useless-constructor': 'error',
    'no-useless-rename': 'error',
    'no-useless-return': 'error',
    'no-var': 'error',
    'no-void': 'error',
    'no-with': 'error',
    'object-shorthand': 'error',
    'one-var': ['error', 'never'],
    'prefer-arrow-callback': 'error',
    'prefer-const': 'error',
    'prefer-object-spread': 'error',
    'prefer-promise-reject-errors': 'error',
    'prefer-rest-params': 'error',
    'prefer-spread': 'error',
    'prefer-template': 'error',
    'prettier/prettier': 'error',
    'require-await': 'error',
    strict: 0,
    yoda: ['error', 'never'],
    'import/no-deprecated': 'error', // Prevents the use of deprecated imports
    'import/no-dynamic-require': 'error', // Prevents the use of dynamic expressions in CJS require
    'import/no-absolute-path': 'error', // Requires that all imports be specified in relative terms
    'import/no-self-import': 'error', // Prevents a module importing itself
    'import/no-useless-path-segments': 'error', // Prevents redundant path sections in imports
    'import/no-unused-modules': 'error', // Requires that all imports be used within the file somewhere.
    'import/no-extraneous-dependencies': 'error', // Requires that all used imports appear within the package.json
    'import/first': 'error', // Requires that all imports appear at the top of the file
    'import/no-duplicates': 'error', // Prevents the same module being imported twice
    'import/newline-after-import': 'error', // Enforces seperation between imports and module definition
    'import/extensions': 'error', // Prevents the use of extensions when importing files
    'import/no-unresolved': ['error', { ignore: ['@date-io/type'] }],
    'import/named': 'off',
    'import/order': ['error', { 'newlines-between': 'always' }],
    'react/no-unknown-property': 'off'
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
  overrides: [
    {
      files: ['**/*.ts', '**/*.tsx'],
      parser: '@typescript-eslint/parser',
      plugins: ['@typescript-eslint/eslint-plugin'],
      rules: {
        'no-unused-vars': 'off',
        '@typescript-eslint/no-unused-vars': 'error',
      },
    },
  ],
};
